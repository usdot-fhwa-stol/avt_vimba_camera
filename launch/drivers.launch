<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2021 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	drivers.launch

This file is used for vehicle configurations. The arguments from carma.launch should pass on to carma_src.launch, which should then pass those arguments to this file. The arguments in the carma.launch file will override all of the default values of the arguments being passed, so you should be making changes to the carma.launch to configure it to your vehicle. 

If not using simulated drivers they are activated if the respective mock arguments being passed in are false. These lines below activate the respective actual driver if the respective mock argument being passed is false.

-->

<launch>
  
  <!-- Shutdown node to shutsdown driver node with fatal message -->
  <!-- <node pkg="driver_shutdown" type="driver_shutdown" name="$(anon driver_shutdown)" required="true"/> -->

  <arg name="vehicle_calibration_dir" default="/opt/carma/vehicle/calibration" doc="Folder containing vehicle calibration directories"/>

  <!-- Mock Drivers -->
  <arg name="mock_drivers"        default="" doc="List of driver node base names which will be launched as mock drivers"/>

  <arg name="mock_can"            value="$(eval 'can' in arg('mock_drivers').split())"/>
  <arg name="mock_comms"          value="$(eval 'comms' in arg('mock_drivers').split())"/>
  <arg name="mock_controller"     value="$(eval 'controller' in arg('mock_drivers').split())"/>
  <arg name="mock_gnss"           value="$(eval 'gnss' in arg('mock_drivers').split())"/>
  <arg name="mock_radar"          value="$(eval 'radar' in arg('mock_drivers').split())"/>
  <arg name="mock_imu"            value="$(eval 'imu' in arg('mock_drivers').split())"/>
  <arg name="mock_lidar"          value="$(eval 'lidar' in arg('mock_drivers').split())"/>
  <arg name="mock_camera"         value="$(eval 'camera' in arg('mock_drivers').split())"/>
  <arg name="mock_roadway_sensor" value="$(eval 'roadway_sensor' in arg('mock_drivers').split())"/>
  <arg name="mock_lightbar" 	    value="$(eval 'lightbar' in arg('mock_drivers').split())"/>
  <arg name="mock_trailer_angle"  value="$(eval 'trailer_angle' in arg('mock_drivers').split())"/>
  <arg name="mock_mobileye" 	    value="$(eval 'mobileye' in arg('mock_drivers').split())"/>

  <!-- Specific Drivers -->
  <arg name="drivers" default="dsrc_driver ssc_interface_wrapper novatel_gps_driver velodyne_lidar_driver_wrapper avt_vimba_camera_fl avt_vimba_camera_fr avt_vimba_camera_sl avt_vimba_camera_sr delphi_esr delphi_srr mobileye_camera"
    doc="Desired real drivers to launch specified by package name. Mock drivers will take precedence"/>

  <arg name="dsrc_driver"                   value="$(eval ('dsrc_driver' in arg('drivers').split()) and not arg('mock_comms'))"/>
  <arg name="ssc_interface_wrapper"         value="$(eval ('ssc_interface_wrapper' in arg('drivers').split()) and not arg('mock_controller'))"/>
  <arg name="novatel_gps_driver"            value="$(eval ('novatel_gps_driver' in arg('drivers').split()) and not (arg('mock_gnss') or arg('mock_imu')))"/>
  <arg name="velodyne_lidar_driver_wrapper" value="$(eval ('velodyne_lidar_driver_wrapper' in arg('drivers').split()) and not arg('mock_lidar'))"/>
  <arg name="avt_vimba_camera_fl"              value="$(eval ('avt_vimba_camera_fl' in arg('drivers').split()) and not arg('mock_camera'))"/>
  <arg name="avt_vimba_camera_fr"              value="$(eval ('avt_vimba_camera_fr' in arg('drivers').split()) and not arg('mock_camera'))"/>
  <arg name="avt_vimba_camera_sl"              value="$(eval ('avt_vimba_camera_sl' in arg('drivers').split()) and not arg('mock_camera'))"/>
  <arg name="avt_vimba_camera_sr"              value="$(eval ('avt_vimba_camera_sr' in arg('drivers').split()) and not arg('mock_camera'))"/>
  <arg name="lidar_lite_trailer_angle_driver" value="$(eval ('lidar_lite_trailer_angle_driver' in arg('drivers').split()) and not arg('mock_trailer_angle'))"/>
  <arg name="lightbar_driver"                 value="$(eval ('lightbar_driver' in arg('drivers').split()) and not arg('mock_lightbar'))"/>
  <arg name="delphi_esr_driver"             value="$(eval ('delphi_esr' in arg('drivers').split()) and not arg('mock_radar'))"/>
  <arg name="delphi_srr_driver"             value="$(eval ('delphi_srr' in arg('drivers').split()) and not arg('mock_radar'))"/>
  <arg name="mobileye_camera_driver"             value="$(eval ('mobileye_camera' in arg('drivers').split()) and not arg('mock_mobileye'))"/>
 
  <param name="robot_description" command="cat $(arg vehicle_calibration_dir)/urdf/carma.urdf" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- DSRC OBU Driver Node -->
  <include if="$(arg dsrc_driver)" file="$(find dsrc_driver)/launch/dsrc_node.launch"/>

  <!-- PACMOD Controller Driver Node -->
  <include if="$(arg ssc_interface_wrapper)" file="$(find ssc_interface_wrapper)/launch/ssc_pm_cascadia_dot_80550_driver.launch">
    <arg name="ssc_param_dir" value="$(arg vehicle_calibration_dir)/ssc_pm_cascadia"/>
  </include>

  <!-- Novatel GNSS/IMU Driver Nodes -->
  <include if="$(arg novatel_gps_driver)" file="$(find novatel_gps_driver)/launch/novatel_gps_driver_eth.launch">
    <arg name="ip" value="192.168.88.29" />
    <arg name="port" value="2000" />
    <arg name="frame_id" value="novatel_gnss" />
    <arg name="imu_frame_id" value="novatel_imu" />
  </include>

  <!-- Velodyne Lidar Driver Nodes -->
  <!-- Lidar 1 -->
  <remap from="driver_discovery" to="$(optenv CARMA_INTR_NS)/driver_discovery"/>
  <include if="$(arg velodyne_lidar_driver_wrapper)" ns="hardware_interface/velodyne_1" file="$(find velodyne_pointcloud)/launch/VLP-32C_points.launch">
    <arg name="frame_id" value="velodyne_1"/>
    <arg name="device_ip" value="192.168.1.201"/>
    <arg name="max_range" value="200" />
    <arg name="port" value="2368" />
  </include>

  <!-- Lidar 2 -->
  <include if="$(arg velodyne_lidar_driver_wrapper)" ns="hardware_interface/velodyne_2" file="$(find velodyne_pointcloud)/launch/VLP-32C_points.launch">
    <arg name="frame_id" value="velodyne_2"/>
    <arg name="device_ip" value="192.168.2.201"/>
    <arg name="max_range" value="200" />
    <arg name="port" value="2369" />
  </include>

  <!-- Lidar Concat -->
  <!-- <include if="$(arg velodyne_lidar_driver_wrapper)" ns="hardware_interface" file="$(find points_preprocessor)/launch/points_concat_filter.launch">
    <arg name="input_topics" default="[velodyne_1/lidar/points_raw, velodyne_2/lidar/points_raw]" />
    <arg name="output_topic" default="lidar/points_raw" />
    <arg name="output_frame_id" default="concat_velodyne" />
  </include> -->

  <!-- Trailer Angle Sensor Driver -->
  <include if="$(arg lidar_lite_trailer_angle_driver)" file="$(find lidar_lite_v3hp)/launch/lidar_litev3hp.launch">
    <arg name="port0" default="/dev/ttyACM1" />
    <arg name="baud0" default="57600" />
    <arg name="port1" default="/dev/ttyACM0" />
    <arg name="baud1" default="57600" />
    <arg name="vehicle_calibration_params_file" default="$(arg vehicle_calibration_dir)/lidar_lite_v3hp/calibration.yaml"/>
  </include>

  <!-- Lightbar Driver Node -->
  <include if="$(arg lightbar_driver)" file="$(find lightbar_driver)/launch/lightbar_driver_node.launch">
    <arg name="host_name" value="192.168.88.28" />
    <arg name="port" value="80" />
    <arg name="auth_config_file" value= "$(arg vehicle_calibration_dir)/lightbar/auth_config.yaml"/>
  </include>

  <!-- Camera parameters -->
  <arg name="front_decimation" value="1"/>
  <arg name="left_side_decimation" value="2"/>
  <arg name="right_side_decimation" value="2"/>
  <arg name="front_encoding" default="BayerRG8" />
  <arg name="left_side_encoding" default="BayerRG8" />
  <arg name="right_side_encoding" default="BayerRG8" />
  <arg name="front_framerate" value="20"/>
  <arg name="left_side_framerate" value="20"/>
  <arg name="right_side_framerate" value="20"/>
  <arg name="compression_params" default="{format: jpeg, jpeg_quality: 90, png_level: 9}" />

  <!-- Front Left Camera Driver Node -->
  <remap from="camera_fl/system_alert" to="system_alert"/>
  <group ns="hardware_interface/camera_fl">
    <include if="$(arg avt_vimba_camera_fl)" file="$(find avt_vimba_camera)/launch/mono_camera.launch">
      <arg name="guid" default=""/>
      <arg name="ip" default="192.168.10.1"/>
      <arg name="camera_info_url" value="file://$(arg vehicle_calibration_dir)/avt_vimba_camera/camera_fl_intrinsics.yaml"/>
      <arg name="frame_id" default="left_optical"/>
      <arg name="trig_timestamp_topic" default=""/>
      <arg name="show_debug_prints" default="false"/>
      <arg name="decimation" value="$(arg front_decimation)" />
      <arg name="acquisition_rate" value="$(arg front_framerate)"/>
      <arg name="pixel_format" value="$(arg front_encoding)"/>
      <param name="width" value="2048"/>
      <param name="height" value="1544"/>
    </include>
  </group>
  
  <!-- Front Right Camera Driver Node -->
  <remap from="camera_fr/system_alert" to="system_alert"/>
  <group ns="hardware_interface/camera_fr">
    <include if="$(arg avt_vimba_camera_fr)" file="$(find avt_vimba_camera)/launch/mono_camera.launch">
      <arg name="guid" default=""/>
      <arg name="ip" default="192.168.20.1"/>
      <arg name="camera_info_url" value="file://$(arg vehicle_calibration_dir)/avt_vimba_camera/camera_fr_intrinsics.yaml"/>
      <arg name="frame_id" default="right_optical"/>
      <arg name="trig_timestamp_topic" default=""/>
      <arg name="show_debug_prints" default="false"/>
      <arg name="decimation" value="$(arg front_decimation)" />
      <arg name="acquisition_rate" value="$(arg front_framerate)"/>
      <arg name="pixel_format" value="$(arg front_encoding)"/>
      <param name="width" value="2048"/>
      <param name="height" value="1544"/>
    </include>
  </group>

  <!-- Left Side Camera Driver Node -->
  <remap from="camera_sl/system_alert" to="system_alert"/>
  <group ns="hardware_interface/camera_sl">
    <include if="$(arg avt_vimba_camera_sl)" file="$(find avt_vimba_camera)/launch/mono_camera.launch">
      <arg name="guid" default=""/>
      <arg name="ip" default="192.168.88.51"/>
      <arg name="camera_info_url" value="file://$(arg vehicle_calibration_dir)/avt_vimba_camera/camera_sl_intrinsics.yaml"/>
      <arg name="frame_id" default="left_side_optical"/>
      <arg name="trig_timestamp_topic" default=""/>
      <arg name="show_debug_prints" default="false"/>
      <arg name="decimation" value="$(arg left_side_decimation)" />
      <arg name="acquisition_rate" value="$(arg left_side_framerate)"/>
      <arg name="pixel_format" value="$(arg left_side_encoding)"/>
      <param name="width" value="2048"/>
      <param name="height" value="1544"/>
    </include>
  </group>
  
  <!-- Right Side Camera Driver Node -->
  <remap from="camera_sr/system_alert" to="system_alert"/>
  <group ns="hardware_interface/camera_sr">
    <include if="$(arg avt_vimba_camera_sr)" file="$(find avt_vimba_camera)/launch/mono_camera.launch">
      <arg name="guid" default=""/>
      <arg name="ip" default="192.168.88.50"/>
      <arg name="camera_info_url" value="file://$(arg vehicle_calibration_dir)/avt_vimba_camera/camera_sr_intrinsics.yaml"/>
      <arg name="frame_id" default="right_side_optical"/>
      <arg name="trig_timestamp_topic" default=""/>
      <arg name="show_debug_prints" default="false"/>
      <arg name="decimation" value="$(arg right_side_decimation)" />
      <arg name="acquisition_rate" value="$(arg right_side_framerate)"/>
      <arg name="pixel_format" value="$(arg right_side_encoding)"/>
      <param name="width" value="2048"/>
      <param name="height" value="1544"/>
    </include>
  </group>
  
  <!-- DelphiESR Front Center Driver Node -->
  <include if="$(arg delphi_esr_driver)" ns="radar_fc" file="$(find delphi_esr)/launch/delphi_esr.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11213" />
    <arg name="kvaser_circuit_id" default="1" />
    <arg name="esr_frame_id" default="radar_fc" />
    <arg name="esr_upside_down" default="false" />
    <arg name="viz_mature_tracks_only" default="false" />
  </include>

  <!-- DelphiSRR2 Front Left Driver Node -->
  <include if="$(arg delphi_srr_driver)" ns="radar_fl" file="$(find delphi_srr2_radar_driver_wrapper)/launch/delphi_srr2_radar_driver_wrapper.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11213" />
    <arg name="kvaser_circuit_id" default="2" />
    <arg name="srr_frame_id" default="radar_fl" />
    <arg name="srr_side" default="Left" />
  </include>

  <!-- DelphiSRR2 Rear Left Driver Node -->
  <include if="$(arg delphi_srr_driver)" ns="radar_rl" file="$(find delphi_srr2_radar_driver_wrapper)/launch/delphi_srr2_radar_driver_wrapper.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11213" />
    <arg name="kvaser_circuit_id" default="1" />
    <arg name="srr_frame_id" default="radar_rl" />
    <arg name="srr_side" default="Left" />
  </include>

  <!-- DelphiSRR2 Rear Right Driver Node -->
  <!-- <include if="$(arg delphi_srr_driver)" ns="radar_rr" file="$(find delphi_srr2_radar_driver_wrapper)/launch/delphi_srr2_radar_driver_wrapper.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11213" />
    <arg name="kvaser_circuit_id" default="0" />
    <arg name="srr_frame_id" default="radar_rr" />
    <arg name="srr_side" default="Right" />
  </include> -->

  <!-- DelphiSRR2 Front Right Driver Node -->
  <include if="$(arg delphi_srr_driver)" ns="radar_fr" file="$(find delphi_srr2_radar_driver_wrapper)/launch/delphi_srr2_radar_driver_wrapper.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11213" />
    <arg name="kvaser_circuit_id" default="3" />
    <arg name="srr_frame_id" default="radar_fr" />
    <arg name="srr_side" default="Right" />
  </include>

  <!-- Mobileye Camera Driver Node -->
  <include if="$(arg mobileye_camera_driver)" ns="mobileye" file="$(find mobileye_camera_driver_wrapper)/launch/mobileye_camera_driver_wrapper.launch">
    <arg name="use_kvaser" default="true" />
    <arg name="kvaser_hardware_id" default="11211" />
    <arg name="kvaser_circuit_id" default="2" />
    <arg name="sensor_frame_id" default="mobileye" />
  </include>
</launch>
